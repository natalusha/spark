{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "blob_title_ratings",
						"type": "DatasetReference"
					},
					"name": "ratingDf"
				},
				{
					"dataset": {
						"referenceName": "blob_title_basics",
						"type": "DatasetReference"
					},
					"name": "titleDf"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "top100all",
						"type": "DatasetReference"
					},
					"name": "top100all"
				},
				{
					"dataset": {
						"referenceName": "top10years",
						"type": "DatasetReference"
					},
					"name": "top10years"
				},
				{
					"dataset": {
						"referenceName": "top60s",
						"type": "DatasetReference"
					},
					"name": "top60s"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "resDf"
				},
				{
					"name": "filter1"
				},
				{
					"name": "rank1"
				},
				{
					"name": "filter10years"
				},
				{
					"name": "rank10years"
				},
				{
					"name": "top100lt10years"
				},
				{
					"name": "filter60s"
				},
				{
					"name": "rank60s"
				},
				{
					"name": "top60sless100"
				},
				{
					"name": "top100alltime"
				}
			],
			"scriptLines": [
				"source(output(",
				"          tconst as string,",
				"          averageRating as double,",
				"          numVotes as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ratingDf",
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as boolean,",
				"          startYear as short,",
				"          endYear as string,",
				"          runtimeMinutes as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> titleDf",
				"ratingDf, titleDf join(ratingDf@tconst==titleDf@tconst,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join1",
				"join1 select(mapColumn(",
				"          tconst = ratingDf@tconst,",
				"          averageRating,",
				"          numVotes,",
				"          primaryTitle,",
				"          startYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"filter1 sort(desc(numVotes, true)) ~> resDf",
				"select1 filter(numVotes>=100) ~> filter1",
				"resDf rank(desc(numVotes, true),",
				"     output(rankMovie as long)) ~> rank1",
				"resDf filter(startYear>=year(currentDate())-10) ~> filter10years",
				"filter10years rank(desc(numVotes, true),",
				"     output(rank10years as long)) ~> rank10years",
				"rank10years filter(rank10years<=100) ~> top100lt10years",
				"resDf filter( between(startYear,1960,1969)) ~> filter60s",
				"filter60s rank(desc(numVotes, true),",
				"     output(rank60s as long)) ~> rank60s",
				"rank60s filter(rank60s<=100) ~> top60sless100",
				"rank1 filter(rankMovie<=100) ~> top100alltime",
				"top100alltime sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0) ~> top100all",
				"top100lt10years sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> top10years",
				"top60sless100 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> top60s"
			]
		}
	}
}